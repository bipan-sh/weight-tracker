generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(cuid())
  name                 String?
  email                String?          @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  height               Float?
  partnerMode          Boolean          @default(false)
  partnerId            String?
  reminderEnabled      Boolean          @default(true)
  reminderTime         String           @default("09:00")
  isFirstLogin         Boolean          @default(true)
  accounts             Account[]
  goals                Goal[]
  receivedInvitations  Invitation[]     @relation("ReceivedInvitations")
  sentInvitations      Invitation[]     @relation("SentInvitations")
  receivedPartnerships Partnership[]    @relation("ReceivedPartnerships")
  sentPartnerships     Partnership[]    @relation("SentPartnerships")
  privacySettings      PrivacySettings?
  sessions             Session[]
  partner              User?            @relation("Couples", fields: [partnerId], references: [id])
  partnerOf            User[]           @relation("Couples")
  weights              Weight[]
}

model Weight {
  id        String   @id @default(cuid())
  value     Float
  date      DateTime @default(now())
  notes     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id           String   @id @default(cuid())
  targetWeight Float
  startWeight  Float
  startDate    DateTime @default(now())
  targetDate   DateTime
  achieved     Boolean  @default(false)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedInvitations", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentInvitations", fields: [senderId], references: [id], onDelete: Cascade)
}

model PrivacySettings {
  id            String  @id @default(cuid())
  userId        String  @unique
  shareWeight   Boolean @default(false)
  shareGoals    Boolean @default(false)
  shareProgress Boolean @default(false)
  publicProfile Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Partnership {
  id        String   @id @default(cuid())
  userId    String
  partnerId String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  partner   User     @relation("ReceivedPartnerships", fields: [partnerId], references: [id], onDelete: Cascade)
  user      User     @relation("SentPartnerships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, partnerId])
  @@index([userId])
  @@index([partnerId])
}
